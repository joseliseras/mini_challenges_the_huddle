import random
import time
import tracemalloc

# Función de ordenamiento por inserción
def ordenamiento_insercion(arr, bajo, alto):
    for i in range(bajo + 1, alto + 1):
        clave = arr[i]
        j = i - 1
        while j >= bajo and arr[j] > clave:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = clave

# Función de partición para QuickSort
def particion(arr, bajo, alto):
    pivote = arr[alto]
    i = bajo - 1
    for j in range(bajo, alto):
        if arr[j] <= pivote:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[alto] = arr[alto], arr[i + 1]
    return i + 1

# Función de QuickSort iterativo
def quicksort_iterativo(arr):
    tamano = len(arr)
    pila = [(0, tamano - 1)]
    
    while pila:
        bajo, alto = pila.pop()
        
        while bajo < alto:
            if alto - bajo + 1 < 16:
                ordenamiento_insercion(arr, bajo, alto)
                break
            else:
                indice_pivote = particion(arr, bajo, alto)
                
                if indice_pivote - bajo < alto - indice_pivote:
                    pila.append((indice_pivote + 1, alto))
                    alto = indice_pivote - 1
                else:
                    pila.append((bajo, indice_pivote - 1))
                    bajo = indice_pivote + 1

# Generar conjuntos de datos
def generar_datos(tamano):
    return [random.randint(0, 1000) for _ in range(tamano)]

# Medir rendimiento (tiempo y memoria)
def medir_rendimiento(funcion, datos):
    tracemalloc.start()
    tiempo_inicio = time.perf_counter()
    funcion(datos)
    tiempo_fin = time.perf_counter()
    _, pico = tracemalloc.get_traced_memory()
    tracemalloc.stop()
    return tiempo_fin - tiempo_inicio, pico / 10**6

# Verificar si el array está ordenado
def verificar_ordenamiento(arr):
    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))

# Probar y mostrar resultados
def probar_y_mostrar(datos, tamano):
    datos_copia = datos.copy()
    tiempo_ejecucion, memoria_pico = medir_rendimiento(quicksort_iterativo, datos_copia)
    
    print(f"Conjunto {tamano} elementos:")
    
    if tiempo_ejecucion < 1e-6:
        tiempo_str = f"{tiempo_ejecucion*1e9:.2f} ns"
    elif tiempo_ejecucion < 1e-3:
        tiempo_str = f"{tiempo_ejecucion*1e6:.2f} µs"
    elif tiempo_ejecucion < 1:
        tiempo_str = f"{tiempo_ejecucion*1e3:.2f} ms"
    else:
        tiempo_str = f"{tiempo_ejecucion:.6f} s"
    
    print(f"Tiempo de Ejecución: {tiempo_str}")
    print(f"Uso de Memoria: {memoria_pico:.6f} MB")
    print(f"Correctamente ordenado: {verificar_ordenamiento(datos_copia)}")
    print("Primeros 30 elementos ordenados:", datos_copia[:30])
    print("Últimos 30 elementos ordenados:", datos_copia[-30:])
    print()

# Generar conjuntos de datos
datos_pequenos = generar_datos(100)
datos_medianos = generar_datos(300)
datos_grandes = generar_datos(500)

# Realizar pruebas
print("Resultados de la Ordenación Rápida Optimizada:")
probar_y_mostrar(datos_pequenos, "Pequeño (100)")
probar_y_mostrar(datos_medianos, "Mediano (300)")
probar_y_mostrar(datos_grandes, "Grande (500)")
